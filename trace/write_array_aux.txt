# DESCRIPTION
## This file simply exists to describe how each block of code were converted into
## memory access traces.
## Adresses: 
## [0 - 30] were used for INSTRUCTIONS
## [31 - 62] were used for a 32 data array
## [63] was used to indicate array size

.data
array:  .word 0:32 [31-62]
n:      .word 32   [63]

.text
.globl main


[0-30] INSTRUCTIONS
[31-63] INSTRUCTIONS

# WRITE TO ALL ELEMENTS OF ARRAYS IN FACTORS OF 2 ([0,2,4,6,8,...])
main:
0 addi t0, t0, 0 # Current sum
1 addi t1, t1, 2 # Base factor
2 la t2, array # Array Address
3 lw t3, n # Array Size


--------
IF 0
IF 1
IF 2
IF 3
DF 63
--------

loopWrite:
4  addi t0, t0, t1
5  sw t0, 0(t2)
  
6  add a0, t0, $zero
7  jal print_register
  
8  addi t2, t2, 4
9  add t3, t3, -1
10 bne t3, $zero, loopWrite

--------
IF 4
IF 5
DW [I] -> {31, 32, ..., 62} 
IF 6
IF 7

----
[PRINT FUNCTION]
IF 23
IF 24
IF 25
IF 26
IF 27
----

IF 8 
IF 9
IF 10
--------

# READ ALL ELEMENTS AND GET SUM
## For each adress also write current sum to include a write operation right after read
redefineVariables:
11 addi t0, t0, 0 # Total sum
12 la t1, word # Address
13 lw t2, n # Size

--------
IF 11
IF 12
IF 13
DF 63
--------


loopRead:
14 lw t3, 0(a1)
15 add t0, t0, t3
  
16 sw t0, 0(t1) # WRITE AFTER MODIFY
  
17 add a0, t0, $zero
18 jal print_register

19 addi t1, t1, 4
20 add t2, t2, -1
21 bne t2, $zero, loopRead


--------
IF 14
DF [I] -> {31, 32, ..., 62}
IF 15
IF 16
DW [I] -> {31, 32, ..., 62} 
IF 17

----
[PRINT FUNCTION]
IF 23
IF 24
IF 25
IF 26
IF 27
----

IF 19 
IF 20
IF 21
--------



#Jump to end
22 j .end

-------
IF 22
-------

print_register:
23 addi a7, a0, $zero          
24 ecall             # Custom system call for printing

25 li a7, 11         # Print newline character            
26 ecall

27 ret               # Return to caller

end:
28 (EMPTY)

-------
IF 28
-------


END ASSEMBLY

