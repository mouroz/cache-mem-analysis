## DESCRIPTION
# This file simply exists to describe how each block of code from write_partial_sum.asm 
# were converted into memory access traces.
#
# The templates marked by <> are not used by the interpreter, and only 
# to better organize how the conversion from asm to memory instructions works
#


## Words
# [N] is where the size will be stored (0)
# [I] is adress of array (1-32)


## Data
# The original data defintions sections is divided by <DATA></DATA>


## Code
# The original code sections are divided by <CODE></CODE>
# Instructions are numbered starting from 0


## Memory instructions
# Memory instructions converted from the code are inside <INST></INSTR>
#
# Loops defined with beq for all elements of the array are marked by <arr-loop></arr-loop>
# loops are also repeated by the converter, and [I] is used to iterate the adresses 
#
# Additional jal function jumps on <INST></INST> are separated by <jal-LABEL></jal-LABEL>
# where LABEL is the name of the label
  

## Memory adress:
# Instructions and Data is already mapped by the simulator
# Therefore instructions start at 0 and data also starts at 0


## Python converter template
# Manual conversion is required for a less readable file used by the python converter 
# where only a few simple indicators are used
# (If needed, it would not be difficult to implement direct conversion later, but its
# not the focus of this project)
#
# The file organization goes as follows:
# [N] can be used anywhere to signal the extraction of "n" word adress
# "loop:" is used to initiate the array loop, and must end with linebreak
# "endloop" is used to end a array loop and must end with linebreak
# Inside the loops [I] are used to extract following array indexes
 
 


<DATA>
    .data
    n:      .word 0   
    array:  .word 1:32 


    .text
    .globl main
</DATA>


<CODE>
    # READ ALL ELEMENTS AND GET SUM
    ## For each adress also write current sum to include a write operation right after read
    redefineVariables:
    11 addi t0, t0, 0 # Total sum
    12 la t1, word # Address
    13 lw t2, n # Size
    loopRead:
    14 lw t3, 0(a1)
    15 add t0, t0, t3
    
    16 sw t0, 0(t1) # WRITE AFTER MODIFY
    
    17 add a0, t0, $zero
    18 jal print_register

    19 addi t1, t1, 4
    20 add t2, t2, -1
    21 bne t2, $zero, loopRead

    #Jump to end
    22 j .end


    print_register:
    23 addi a7, a0, $zero          
    24 ecall             # Custom system call for printing

    25 li a7, 11         # Print newline character            
    26 ecall

    27 ret               # Return to caller

    end:
    28 (EMPTY INSTRUCTION - END)


    # WRITE TO ALL ELEMENTS OF ARRAYS IN FACTORS OF 2 ([0,2,4,6,8,...])
    main:
    0 addi t0, t0, 0 # Current sum
    1 addi t1, t1, 2 # Base factor
    2 la t2, array # Array Address
    3 lw t3, n # Array Size

    loopWrite:
    4  addi t0, t0, t1
    5  sw t0, 0(t2)
    
    6  add a0, t0, $zero
    7  jal print_register
    
    8  addi t2, t2, 4
    9  add t3, t3, -1
    10 bne t3, $zero, loopWrite

    # READ ALL ELEMENTS AND GET SUM
    ## For each adress also write current sum to include a write operation right after read
    redefineVariables:
    11 addi t0, t0, 0 # Total sum
    12 la t1, word # Address
    13 lw t2, n # Size

    loopRead:
    14 lw t3, 0(a1)
    15 add t0, t0, t3
    
    16 sw t0, 0(t1) # WRITE AFTER MODIFY
    
    17 add a0, t0, $zero
    18 jal print_register

    19 addi t1, t1, 4
    20 add t2, t2, -1
    21 bne t2, $zero, loopRead


    #Jump to end
    22 j .end


    print_register:
    23 li a7, a0          
    24 ecall             # Custom system call for printing

    25 li a7, 11         # Print newline character            
    26 ecall

    27 ret               # Return to caller

    end:
    28 # NO INSTRUCTIONS - FORCED END

<CODE>


<INST>
    IF 0
    IF 1
    IF 2
    IF 3
    DF [N]
    <arr-loop>
        IF 4
        IF 5
        DW [I] 
        IF 6
        IF 7
        <jal-print>
            [PRINT FUNCTION]
            IF 23
            IF 24
            IF 25
            IF 26
            IF 27
        </jal-print>
        IF 8 
        IF 9
        IF 10
    </arr-loop>
    IF 11
    IF 12
    IF 13
    DF [N]
    <arr-loop>
        IF 14
        DF [I] 
        IF 15
        IF 16
        DW [I] 
        IF 17
        <jal-print>
            IF 23
            IF 24
            IF 25
            IF 26
            IF 27
        </jal-print>
        IF 19 
        IF 20
        IF 21
    </arr-loop>
    IF 22
    IF 28
</INST>



